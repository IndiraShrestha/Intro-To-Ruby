# # Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# #

# a = 1

# b = 1

# c = 0

# total = 0


# while c < 4000000
#   c = a + b 
#   #puts c
#   a = b
#   b = c
#     if c % 2 == 0
#       total += c
#     end
# end 

# puts total
# num = 9001009
# palindorm = true

#     array_num = num.to_s
#     #puts array_num
#     array_num.each_with_index do |val, index|
#       lenght_of_array = array_num.length - 1
#       #puts "The lenght of #{lenght_of_array}"
#       loop_index = lenght_of_array - index 
#       #puts "The #{array_num[index]} and the #{array_num[loop_index]} "  
#       if array_num[index] == array_num[loop_index]
#         palindorm = false
#       else 
#         palindorm = true  
#         palindorm_num = num
#       end  
#     end  
   

# puts num
# puts "The #{palindorm_num}" if palindorm = true

# start = 100
# stops = 999
# palindorm = 0
# (start..stops).each do |x|
#   (x..stops).each do |y|
#     num = x * y
#     num_string = num.to_s
#     if num_string == num_string.reverse 
#       if palindorm < num
#         palindorm = num
#       end  
#     end
#   end
# end  

# puts palindorm

# require 'rational' puts (1..20).inject(1) { |result, n| result.lcm n }

# low = 1
# high = 100
# sum_of_square = 0
# square_of_sum = 0
# (low..high).each do |x|
#   sum_of_square = (x * x) + sum_of_square
#   square_of_sum = x + square_of_sum
# end  

# square_of_sum = square_of_sum * square_of_sum

# output = square_of_sum - sum_of_square

# puts output

# prime = [2, 3, 5, 7, 11, 13]
# num = 13
# prime_boolean = true
# while prime.length < 20
#   (2..(num-1)).each do |x|
#     if num % x == 0
#       prime_boolean = false 
#       next
#     end 
#   end
#   if prime_boolean == true 
#     prime << num
#   end  
#   num += 1
# end  


# puts prime


# The museum of incredible dull things wants to get rid of some exhibitions. Miriam, the interior architect, comes up with a plan to remove the most boring exhibitions. She gives them a rating, and then removes the one with the lowest rating.

# However, just as she finished rating all exhibitions, she's off to an important fair, so she asks you to write a program that tells her the ratings of the items after one removed the lowest one. Fair enough.

# Task

# Given an array of integers, remove the smallest value. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty array/list, return an empty array/list.

# Don't change the order of the elements that are left.

def remove_smallest(numbers)
  num_to_be_popped = 0
  numbers.each_with_index do |val, index|
    if index <= (numbers.length - 1)
      if numbers[index] > numbers[index + 1]
         num_to_be_popped = numbers[index + 1] 
      end
    end    
  end  
  puts num_to_be_popped
end  

puts remove_smallest([5,3,2,1,4])










